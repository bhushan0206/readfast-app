import React, { useState } from 'react';
import { CheckCircle, XCircle } from 'lucide-react';
import { useReadingStore } from '../../../store/readingStore';
import { useAchievementStore } from '../../../store/achievementStore';
import { useAuthStore } from '../../../store/authStore';
import { getUserReadingStats } from '../../../services/supabase';
import Button from '../../../shared/components/Button';

interface ComprehensionQuizProps {
  text: any;
  onComplete: () => void;
}

// Mock questions based on text content
// In a real app, these would be generated by AI or stored in the database
const generateMockQuestions = (text: any) => {
  // For demo purposes, return static questions
  return [
    {
      question: 'Did you understand the text content?',
      options: ['Yes, completely', 'Mostly', 'Partially', 'Not really'],
    },
    {
      question: 'How would you rate your comprehension?',
      options: ['Excellent', 'Good', 'Fair', 'Poor'],
    },
    {
      question: 'Was the reading speed comfortable?',
      options: ['Too slow', 'Just right', 'A bit fast', 'Too fast'],
    },
  ];
};

const ComprehensionQuiz: React.FC<ComprehensionQuizProps> = ({ text, onComplete }) => {
  const { user } = useAuthStore();
  const { currentSession, setComprehensionScore } = useReadingStore();
  const { checkAchievements } = useAchievementStore();
  
  const [questions] = useState(generateMockQuestions(text));
  const [answers, setAnswers] = useState<number[]>([]);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [completed, setCompleted] = useState(false);
  const [score, setScore] = useState(0);
  const [unlockedAchievements, setUnlockedAchievements] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);

  const handleAnswer = (optionIndex: number) => {
    const newAnswers = [...answers];
    newAnswers[currentQuestionIndex] = optionIndex;
    setAnswers(newAnswers);
  };

  const handleNextQuestion = () => {
    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
    } else {
      completeQuiz();
    }
  };

  const completeQuiz = async () => {
    try {
      setLoading(true);
      
      // Calculate score (mock calculation)
      const calculatedScore = Math.floor(
        answers.reduce((sum, answer) => {
          // First option is worth 100%, second 75%, third 50%, fourth 25%
          const points = 100 - (answer * 25);
          return sum + points;
        }, 0) / answers.length
      );
      
      setScore(calculatedScore);
      setComprehensionScore(calculatedScore);
      
      // Check for achievements if user is logged in
      if (user) {
        const stats = await getUserReadingStats(user.id);
        
        if (stats) {
          const newAchievements = await checkAchievements({
            ...stats,
            // Add session data
            sessions_completed: stats.sessions_completed + 1,
            total_words_read: stats.total_words_read + (currentSession.wordsRead || 0),
            max_wpm: Math.max(stats.max_wpm, currentSession.wpm || 0),
          });
          
          setUnlockedAchievements(newAchievements);
        }
      }
      
      setCompleted(true);
    } catch (error) {
      console.error('Error completing quiz:', error);
    } finally {
      setLoading(false);
    }
  };

  if (completed) {
    return (
      <div className="max-w-2xl mx-auto text-center">
        <div className="card">
          <div className="mb-6">
            <div className="inline-flex items-center justify-center w-20 h-20 bg-primary-100 rounded-full mb-4">
              <CheckCircle size={40} className="text-primary-600" />
            </div>
            <h2 className="text-2xl font-bold text-neutral-900">Reading Complete!</h2>
            <p className="text-neutral-600 mt-2">
              You've finished reading "{text.title}" with a comprehension score of:
            </p>
            <div className="text-5xl font-bold text-primary-600 mt-2">{score}%</div>
          </div>
          
          <div className="mt-8">
            <div className="grid grid-cols-2 gap-4 text-left">
              <div className="p-4 bg-neutral-50 rounded-lg">
                <h3 className="font-medium text-neutral-800">Reading Speed</h3>
                <p className="text-2xl font-bold text-primary-600">{currentSession.wpm || 0} WPM</p>
              </div>
              <div className="p-4 bg-neutral-50 rounded-lg">
                <h3 className="font-medium text-neutral-800">Words Read</h3>
                <p className="text-2xl font-bold text-primary-600">{currentSession.wordsRead || 0}</p>
              </div>
            </div>
          </div>
          
          {unlockedAchievements.length > 0 && (
            <div className="mt-8 p-4 bg-accent-50 rounded-lg border border-accent-200">
              <h3 className="font-medium text-accent-800 mb-2">Achievements Unlocked!</h3>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                {unlockedAchievements.map((achievement) => (
                  <div key={achievement.id} className="flex items-center p-2 bg-white rounded-lg achievement-unlocked">
                    <div className="bg-accent-100 p-2 rounded-full text-accent-700 mr-3">
                      üèÜ
                    </div>
                    <div>
                      <p className="font-medium text-neutral-800">{achievement.name}</p>
                      <p className="text-xs text-neutral-500">{achievement.description}</p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
          
          <div className="mt-8">
            <Button onClick={onComplete} size="lg">
              Back to Dashboard
            </Button>
          </div>
        </div>
      </div>
    );
  }

  const currentQuestion = questions[currentQuestionIndex];

  return (
    <div className="max-w-2xl mx-auto">
      <div className="card">
        <h2 className="text-xl font-bold text-neutral-900 mb-6">Comprehension Check</h2>
        
        <div className="mb-4">
          <div className="flex justify-between text-sm text-neutral-500 mb-1">
            <span>Question {currentQuestionIndex + 1} of {questions.length}</span>
          </div>
          <div className="progress-bar">
            <div 
              className="progress-bar-fill" 
              style={{ width: `${((currentQuestionIndex + 1) / questions.length) * 100}%` }}
            ></div>
          </div>
        </div>
        
        <div className="my-6">
          <h3 className="text-lg font-medium text-neutral-800 mb-4">{currentQuestion.question}</h3>
          
          <div className="space-y-3">
            {currentQuestion.options.map((option, index) => (
              <div 
                key={index}
                className={`
                  p-3 rounded-lg border cursor-pointer transition-colors
                  ${answers[currentQuestionIndex] === index 
                    ? 'bg-primary-50 border-primary-300' 
                    : 'bg-white border-neutral-200 hover:border-neutral-300'}
                `}
                onClick={() => handleAnswer(index)}
              >
                <div className="flex items-center">
                  <div className={`
                    w-5 h-5 rounded-full mr-3 flex items-center justify-center border
                    ${answers[currentQuestionIndex] === index 
                      ? 'border-primary-500 bg-primary-500 text-white' 
                      : 'border-neutral-300'}
                  `}>
                    {answers[currentQuestionIndex] === index && (
                      <CheckCircle size={14} />
                    )}
                  </div>
                  <span>{option}</span>
                </div>
              </div>
            ))}
          </div>
        </div>
        
        <div className="flex justify-end">
          <Button
            onClick={handleNextQuestion}
            disabled={answers[currentQuestionIndex] === undefined || loading}
            isLoading={loading}
          >
            {currentQuestionIndex < questions.length - 1 ? 'Next Question' : 'Finish'}
          </Button>
        </div>
      </div>
    </div>
  );
};

export default ComprehensionQuiz;